AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ApplicationName:
    Type: String
    Default: TwitchBot
  AvailabilityZone1: 
    Type: String
    Default: us-east-1a
  EC2Instance:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Can contain only ASCII characters.
  IpAccess:
    Description: The IP address that can be used to SSH to the EC2 instance or connect via HTTP.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    PublicSubnet:
      CIDR: 10.0.0.0/24
    PrivateSubnet:
      CIDR: 10.0.1.0/24
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref ApplicationName, "VPC"]]
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Ref: AvailabilityZone1
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - PublicSubnet
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref ApplicationName, "PublicSubnet"]]
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Ref: AvailabilityZone1
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - PrivateSubnet
        - CIDR
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref ApplicationName, "PrivateSubnet"]]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref ApplicationName, "InternetGateway"]]
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicRouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  ClientInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22. Enable HTTP access via port 30303.
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp:
          Ref: IpAccess
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref ApplicationName, "SecurityGroup"]]
  ClientEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: EC2Instance
      KeyName:
        Ref: KeyName
      IamInstanceProfile:
        Ref: EC2InstanceProfile
      AvailabilityZone:
        Ref: AvailabilityZone1
      SubnetId:
        Ref: PublicSubnet
      SecurityGroupIds:
      - Fn::GetAtt:
        - ClientInstanceSecurityGroup
        - GroupId
      ImageId: ami-0dc2d3e4c0f9ebd18
      Tags:
      - Key: Name
        Value: !Join ["-", [!Ref ApplicationName, "ClientInstance"]]
      UserData:
        Fn::Base64: "
          #!/bin/bash -xe\n
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1 \n
            echo \"Updating EC2 Instance . . .\" \n
            yum update -y \n
            echo \"Installing Git . . .\" \n
            yum install git \n
            echo \"Installing Node . . .\" \n
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash \n
            . ~/.nvm/nvm.sh \n
            nvm install node \n
            echo \"Installing TwitchAttack . . .\" \n
            cd /home/ec2-user \n
            mkdir TwitchAttack \n
            cd /home/ec2-user/TwitchAttack \n
            curl -o- https://github.com/JoshuaTyler-GitHub/twitch-attack | bash \n
            echo \"Starting TwitchAttack . . .\" \n
            cd /home/ec2-user/TwitchAttack
            node index.js \n
          "
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Join ["-", [!Ref ApplicationName, "EC2InstanceProfile"]]
      Roles:
      - Ref: EC2Role
Outputs:
  VPCId:
    Description: The ID of the VPC created
    Value:
      Ref: VPC
  PublicSubnet:
    Description: The name of the public subnet created
    Value:
      Ref: PublicSubnet
  PrivateSubnet:
    Description: The ID of private subnet one created
    Value:
      Ref: PrivateSubnet
  ClientInstanceSecurityGroupID:
    Description: The ID of the security group created for the  Client
    Value:
      Fn::GetAtt:
      - ClientInstanceSecurityGroup
      - GroupId
  ClientEC2InstancePublicDNS:
    Description: The Public DNS for the  EC2 instance
    Value:
      Fn::GetAtt:
      - ClientEC2Instance
      - PublicDnsName
